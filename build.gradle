plugins {
    id 'java'
    id 'groovy'
    id "com.jfrog.bintray" version "1.8.4"
    id "com.github.spotbugs" version "3.0.0"
    id 'checkstyle'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'distribution'
}
version = '0.8'

ext {
    javaVersion = '1.8'
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven/"
    }
    jcenter()
}

dependencies {
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.json:json:20160810'
    compile fileTree(dir: 'lib', include: '*.jar')
    compile 'org.slf4j:slf4j-api:1.7.25'
    compileOnly 'org.omegat:omegat:4.3.0'
    compileOnly 'commons-io:commons-io:2.5'
    compileOnly 'commons-lang:commons-lang:2.6'
    testImplementation 'org.omegat:omegat:4.3.0'
    testImplementation 'commons-io:commons-io:2.4'
    testImplementation 'commons-lang:commons-lang:2.6'
    testImplementation "org.codehaus.groovy:groovy-all:2.5.6"
    testImplementation 'org.testng:testng:6.9.10'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
}
test.useTestNG()

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes("OmegaT-Plugins": "tokyo.northside.omegat.textra.OmegatTextraMachineTranslation")
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

tasks.withType(Checkstyle) {
    exclude('**/dialog/TextraOptionDialog.java')
}

spotless {
    enforceCheck false
    java {
        targetExclude 'src/gen/**'
        eclipse().configFile 'docs_devel/eclipse-formatting.xml'
        removeUnusedImports()
    }
}

task changedOnBranch {
    description = 'List files that have been modified on this git branch.'
    doLast {
        ext.files = project.files(gitModifiedFiles())
        ext.files.each { println(it) }
    }
}

task spotlessChangedApply {
    description = 'Apply code formatting to files that have been changed on the current branch.'
    finalizedBy 'spotlessApply'
    dependsOn changedOnBranch
    doFirst {
        spotlessJava.target = changedOnBranch.files.findAll {
            it.path.endsWith('.java')
        }
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    ignoreFailures = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives sourcesJar
}

distTar {
  compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from(jar)
            from('README.md', 'CHANGELOG.md', 'COPYING', 'DEVELOP.md')
            from(sourcesJar) {
                into 'source'
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        repo = 'omegat-plugins'
        name = 'omegat-textra-plugin'
        userOrg = 'miurahr'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/miurahr/omegat-textra-plugin.git'
        version {
			name = '0.8'
			desc = 'Omegat Textra Machine Translation plugin'
			vcsTag = 'v0.8'
		}
    }
}

